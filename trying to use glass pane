import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;

import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JPanel;

public class testing{
	
	
	public static void main(String [] args){
		JFrame frame = new JFrame();
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setSize(new Dimension(1000,500));
		frame.setVisible(true);
		Container contentPane=frame.getContentPane();
		JButton b=new JButton("b");
		JButton n=new JButton("n"); 
		contentPane.setLayout(new GridBagLayout());
		GridBagConstraints cons = new GridBagConstraints();
		cons.weightx = 0.5;
		cons.fill = GridBagConstraints.HORIZONTAL;
		cons.gridx = 1;
		cons.gridy = 0;
		contentPane.add(b, cons);
		cons.weightx = 0.5;
		cons.fill = GridBagConstraints.HORIZONTAL;
		cons.gridx = 2;
		cons.gridy = 0;
		contentPane.add(n, cons);
		
		JPanel glass = new JPanel();
//		{
//			public void paintComponent(Graphics g)
//			{
//				g.setColor(Color.red);
//				g.drawOval(10,10,getWidth() -20, getHeight() - 20); 
//			}
//		};
		glass.setOpaque(false);
		frame.setGlassPane(glass);
		glass.setVisible(true);
		glass.setBackground(Color.red);
		
		
		MouseListener ml=new MouseListener() {

			@Override
			public void mouseClicked(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void mousePressed(MouseEvent e) {
				// TODO Auto-generated method stub
				dispatchEvent(e);
			}

			private void dispatchEvent(MouseEvent e) {
				// TODO Auto-generated method stub

		        if (isBlocked)
		            return;
		        Point glassPanePoint = e.getPoint();
		        Container container = frame.getContentPane();
		        Point containerPoint = SwingUtilities.convertPoint(glass,
		                glassPanePoint, container);

		        if (containerPoint.y < 0) { // we're not in the content pane
		            // Could have special code to handle mouse events over
		            // the menu bar or non-system window decorations, such as
		            // the ones provided by the Java look and feel.
		        } else {
		            // The mouse event is probably over the content pane.
		            // Find out exactly which component it's over.
		            Component component = SwingUtilities.getDeepestComponentAt(
		                    container, containerPoint.x, containerPoint.y);

		            if (component != null) {
		                // Forward events to component below
		                Point componentPoint = SwingUtilities.convertPoint(
		                        glass, glassPanePoint, component);
		                component.dispatchEvent(new MouseEvent(component, e
		                        .getID(), e.getWhen(), e.getModifiers(),
		                        componentPoint.x, componentPoint.y, e
		                                .getClickCount(), e.isPopupTrigger()));
		            }
		        }
			}

			@Override
			public void mouseReleased(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void mouseEntered(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void mouseExited(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}
			
		};
		
		glass.addMouseListener(ml);
		glassButton.addActionListener(new ActionListener() {
		    public void actionPerformed(ActionEvent ae) {
		        if (isBlocked) {
		            // glass.removeMouseListener(ml);
		            glassButton.setText("Block");
		        } else {
		            // ml = new MouseAdapter() { };
		            // glass.addMouseListener(ml);
		            glassButton.setText("Unblock");
		        }

		        isBlocked = !isBlocked;
		    }
		});
		
	}
	
	
	

	
}


class MyGlassPane extends JComponent implements MouseListener{

	@Override
	public void mouseClicked(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mousePressed(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseReleased(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseEntered(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseExited(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}
	
}
