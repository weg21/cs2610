import java.awt.Component;
import java.awt.Container;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.event.MouseEvent;
import javax.swing.SwingUtilities;
import javax.swing.event.MouseInputAdapter;


public class MListener extends MouseInputAdapter{

    Toolkit toolkit;
    GlassPane glassPane;
    Container contentPane;
 
    public MListener(GlassPane glassPane, Container contentPane) {
        toolkit = Toolkit.getDefaultToolkit();
        this.glassPane = glassPane;
        this.contentPane = contentPane;
    }
 
    public void mouseMoved(MouseEvent e) {
        redispatchMouseEvent(e, false);
    }
 
    public void mouseDragged(MouseEvent e) {
        redispatchMouseEvent(e, true);
    }
 
    public void mouseClicked(MouseEvent e) {
        redispatchMouseEvent(e, false);
    }
 
    public void mouseEntered(MouseEvent e) {
        redispatchMouseEvent(e, false);
    }
 
    public void mouseExited(MouseEvent e) {
        redispatchMouseEvent(e, false);
    }
 
    public void mousePressed(MouseEvent e) {
        redispatchMouseEvent(e, false);
    }
 
    public void mouseReleased(MouseEvent e) {
        redispatchMouseEvent(e, false);
    }
 
    //A basic implementation of redispatching events.
    private void redispatchMouseEvent(MouseEvent e,
                                      boolean tF) {
        Point glassPanePoint = e.getPoint();
        Container container = contentPane;
        Point containerPoint = SwingUtilities.convertPoint(
                                        glassPane,
                                        glassPanePoint,
                                        contentPane);
        if (containerPoint.y < 0) { //we're not in the content pane
        } else {
            //The mouse event is probably over the content pane.
            //Find out exactly which component it's over.  
            Component component = 
                SwingUtilities.getDeepestComponentAt(
                                        container,
                                        containerPoint.x,
                                        containerPoint.y);
                             
            if ((component != null)) {
                //Forward events over the check box.
                Point componentPoint = SwingUtilities.convertPoint(
                                            glassPane,
                                            glassPanePoint,
                                            component);
//                component.dispatchEvent(new MouseEvent(component,
//                                                     e.getID(),
//                                                     e.getWhen(),
//                                                     e.getModifiers(),
//                                                     componentPoint.x,
//                                                     componentPoint.y,
//                                                     e.getClickCount(),
//                                                     e.isPopupTrigger()));
                component.dispatchEvent(e);
            }
        }
         
        //Update the glass pane if requested.
        if (tF) {
            glassPane.setPoint(glassPanePoint);
            glassPane.repaint();
        }
    }

}
