import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.util.ArrayList;

import javax.swing.AbstractButton;
import javax.swing.JFrame;
import javax.swing.JMenuBar;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.event.MouseInputAdapter;

public class GlassPane extends JPanel{
	
	Point point;
	ArrayList<Point> pointList;
	//Container container;
	
	
	public GlassPane(Container cPane) {
		point=null;  
		pointList = new ArrayList<Point>();
		MListener listener = new MListener(this,cPane);
		this.addMouseListener(listener);
		this.addMouseMotionListener(listener);
	
	}
	
	public void setPoint(Point p) {
	    point = p;
	}
	
	@Override
	public void paint(Graphics g) {
		g.setColor(Color.red);
		Graphics2D g2=(Graphics2D)g;
		g2.setStroke(new BasicStroke(2));
			if(point!=null)
				{
				for(int i=0;i<(pointList.size()-1);i++)
					{
						g.drawLine(pointList.get(i).x,pointList.get(i).y,pointList.get(i+1).x,pointList.get(i+1).y);
					}
				}
	}
	
	//@Override
	//public void mouseClicked(MouseEvent arg0) {}
	//
	//@Override
	//public void mouseEntered(MouseEvent arg0) {}
	//
	//@Override
	//public void mouseExited(MouseEvent arg0) {
	//	
	//}
	//
	//@Override
	//	public void mousePressed(MouseEvent e) {
	//		if(SwingUtilities.isRightMouseButton(e))
	//		{
	//			pointList.clear();
	//			repaint();
	//		}
	//		else
	//		{
	//			point=e.getPoint();
	//			pointList.add(point);
	//		}
	//	}
	//
	//@Override
	//	public void mouseReleased(MouseEvent e) {
	//		point=null;
	//	}
	//
	//@Override
	//	public void mouseDragged(MouseEvent e) {
	//		point=e.getPoint();
	//		pointList.add(point);
	//		repaint();
	//	}
	//
	//@Override
	//public void mouseMoved(MouseEvent arg0) {}
	//}
	
	/******************************************/
	
	
	
		class MListener extends MouseInputAdapter{
		
		    Toolkit toolkit;
		    GlassPane glassPane;
		    Container contentPane;
		 
		    public MListener(GlassPane glassPane, Container contentPane) {
		        toolkit = Toolkit.getDefaultToolkit();
		        this.glassPane = glassPane;
		        this.contentPane = contentPane;
		    }
		 
		    public void mouseMoved(MouseEvent e) {
		        redispatchMouseEvent(e, false);
		    }
		 
		    public void mouseDragged(MouseEvent e) {
				point=e.getPoint();
				pointList.add(point);
		    				
		    	redispatchMouseEvent(e, true);
		        
		    }
		 
		    public void mouseClicked(MouseEvent e) {
		        redispatchMouseEvent(e, false);
		    }
		 
		    public void mouseEntered(MouseEvent e) {
		        redispatchMouseEvent(e, false);
		    }
		 
		    public void mouseExited(MouseEvent e) {
		        redispatchMouseEvent(e, false);
		    }
		 
		    public void mousePressed(MouseEvent e) {
		        redispatchMouseEvent(e, false);
		    }
		 
		    public void mouseReleased(MouseEvent e) {
		    	if(SwingUtilities.isLeftMouseButton(e))
				{
					redispatchMouseEvent(e, true);
					pointList.clear();
					repaint();
				}
		    	else{
		    		redispatchMouseEvent(e, false);
		    	}
				
		    }
		 
		    //A basic implementation of redispatching events.
		private void redispatchMouseEvent(MouseEvent e,
		                                  boolean tF) {
		    Point glassPanePoint = e.getPoint();
		    Container container = contentPane;
		    Point containerPoint = SwingUtilities.convertPoint(
		                                    glassPane,
		                                    glassPanePoint,
		                                    contentPane);
		    if (containerPoint.y < 0) { //we're not in the content pane
		} else {
		    //The mouse event is probably over the content pane.
		//Find out exactly which component it's over.  
		Component component = 
		    SwingUtilities.getDeepestComponentAt(
		                            container,
		                            containerPoint.x,
		                            containerPoint.y);
		                 
		if ((component != null)) {
		    //Forward events over the check box.
		        Point componentPoint = SwingUtilities.convertPoint(
		                                    glassPane,
		                                    glassPanePoint,
		                                    component);
		        component.dispatchEvent(new MouseEvent(component,
		                                             e.getID(),
		                                             e.getWhen(),
		                                             e.getModifiers(),
		                                             componentPoint.x,
		                                             componentPoint.y,
		                                             e.getClickCount(),
		                                             e.isPopupTrigger()));
		  //      component.dispatchEvent(e);
		    }
		}
		 
		//Update the glass pane if requested.
		    if (tF) {
		        glassPane.setPoint(glassPanePoint);
		        glassPane.repaint();
		    }
		}
		
	}
}
